_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[45],{D9Tl:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"default",(function(){return u}));var r=n("rePB"),o=n("Ff2n"),a=(n("q1tI"),n("7ljp")),i=n("ZDfL");function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){Object(r.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p={title:"Writing an acceptance test for a Redactor WYSIWYG editor in Ember",date:"2014-12-12",__resourcePath:"blog/writing-an-acceptance-test-for-a-Redactor-WYSIWYG-editor-in-Ember/index.md",__scans:{},layout:"index"},s={frontMatter:p},b=i.a;function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)(b,l(l(l({},s),n),{},{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"I wrote a simple component to wrap the ",Object(a.b)("a",l({parentName:"p"},{href:"imperavi.com/redactor/"}),"Redactor")," WYSIWYG editor library. I was having trouble testing it, since it uses ",Object(a.b)("inlineCode",{parentName:"p"},"contenteditable"),", meaning Ember's built-in ",Object(a.b)("inlineCode",{parentName:"p"},"fillIn")," helper wouldn't work."),Object(a.b)("p",null,"Instead I used jQuery's ",Object(a.b)("inlineCode",{parentName:"p"},".html")," method. I also needed to use ",Object(a.b)("inlineCode",{parentName:"p"},"triggerEvent")," to let Ember know the content had changed. Here's a basic implementation:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),'visit("/");\n\nandThen(() => {\n  $(\'.Lesson-intro [contenteditable="true"]\').html("<p>Blah</p>");\n  triggerEvent(\'.Lesson-intro [contenteditable="true"]\', "keyup");\n});\n\nandThen(() => {\n  var lesson = App.__container__\n    .lookup("controller:application")\n    .get("attrs.lesson");\n  equal(lesson.get("intro"), "<p>Blah</p>");\n});\n')),Object(a.b)("p",null,"This worked, and my test verified that changing the content on the WYSIWYG region updated my model's property."),Object(a.b)("p",null,"I then wrapped the redactor logic into a test helper:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),'import Ember from "ember";\n\nEmber.Test.registerAsyncHelper("fillInRedactor", function (\n  app,\n  selector,\n  content\n) {\n  var el = `${selector} [contenteditable=\'true\']`;\n  $(el).html(content);\n  return triggerEvent(el, "keyup");\n});\n\nexport default {};\n')),Object(a.b)("p",null,"which simplified my test to"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),'test("I can edit the lesson", function () {\n  visit("/");\n  fillInRedactor(".Lesson-intro", "<p>Blah</p>");\n\n  andThen(() => {\n    var lesson = App.__container__\n      .lookup("controller:application")\n      .get("attrs.lesson");\n    equal(lesson.get("intro"), "<p>Blah</p>");\n  });\n});\n')),Object(a.b)("p",null,"which I'm quite happy with!"))}u.isMDXComponent=!0},"h+VG":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/writing-an-acceptance-test-for-a-Redactor-WYSIWYG-editor-in-Ember",function(){return n("D9Tl")}])}},[["h+VG",0,2,1,3,4,5,6]]]);