_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[40],{"2mql":function(e,t,n){"use strict";var a=n("TOwV"),r={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function c(e){return a.isMemo(e)?i:s[e.$$typeof]||r}s[a.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[a.Memo]=i;var h=Object.defineProperty,l=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,u=Object.getOwnPropertyDescriptor,b=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,a){if("string"!==typeof n){if(p){var r=b(n);r&&r!==p&&e(t,r,a)}var i=l(n);d&&(i=i.concat(d(n)));for(var s=c(t),m=c(n),f=0;f<i.length;++f){var g=i[f];if(!o[g]&&(!a||!a[g])&&(!m||!m[g])&&(!s||!s[g])){var w=u(n,g);try{h(t,g,w)}catch(y){}}}}return t}},AImo:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return B})),n.d(t,"default",(function(){return z}));var a=n("rePB"),r=n("Ff2n"),o=n("q1tI"),i=n.n(o),s=n("7ljp"),c=n("ZDfL"),h=n("zLVn"),l=n("wx14");function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var u=n("dI71"),b=n("TOwV"),p=n("2mql"),m=n.n(p);function f(e,t){if(!e){var n=new Error("loadable: "+t);throw n.framesToPop=1,n.name="Invariant Violation",n}}var g=i.a.createContext();var w={initialChunks:{}};var y=function(e){return e};function j(e){var t=e.defaultResolveComponent,n=void 0===t?y:t,a=e.render,r=e.onLoad;function o(e,t){void 0===t&&(t={});var o=function(e){return"function"===typeof e?{requireAsync:e,resolve:function(){},chunkName:function(){}}:e}(e),s={};function c(e){return t.cacheKey?t.cacheKey(e):o.resolve?o.resolve(e):"static"}function p(e,a,r){var o=t.resolveComponent?t.resolveComponent(e,a):n(e);if(t.resolveComponent&&!Object(b.isValidElementType)(o))throw new Error("resolveComponent returned something that is not a React component!");return m()(r,o,{preload:!0}),o}var y,j=function(e){function n(n){var a;return(a=e.call(this,n)||this).state={result:null,error:null,loading:!0,cacheKey:c(n)},f(!n.__chunkExtractor||o.requireSync,"SSR requires `@loadable/babel-plugin`, please install it"),n.__chunkExtractor?(!1===t.ssr||(o.requireAsync(n).catch((function(){return null})),a.loadSync(),n.__chunkExtractor.addChunk(o.chunkName(n))),d(a)):(!1!==t.ssr&&(o.isReady&&o.isReady(n)||o.chunkName&&w.initialChunks[o.chunkName(n)])&&a.loadSync(),a)}Object(u.a)(n,e),n.getDerivedStateFromProps=function(e,t){var n=c(e);return Object(l.a)({},t,{cacheKey:n,loading:t.loading||t.cacheKey!==n})};var i=n.prototype;return i.componentDidMount=function(){this.mounted=!0;var e=this.getCache();e&&"REJECTED"===e.status&&this.setCache(),this.state.loading&&this.loadAsync()},i.componentDidUpdate=function(e,t){t.cacheKey!==this.state.cacheKey&&this.loadAsync()},i.componentWillUnmount=function(){this.mounted=!1},i.safeSetState=function(e,t){this.mounted&&this.setState(e,t)},i.getCacheKey=function(){return c(this.props)},i.getCache=function(){return s[this.getCacheKey()]},i.setCache=function(e){void 0===e&&(e=void 0),s[this.getCacheKey()]=e},i.triggerOnLoad=function(){var e=this;r&&setTimeout((function(){r(e.state.result,e.props)}))},i.loadSync=function(){if(this.state.loading)try{var e=p(o.requireSync(this.props),this.props,v);this.state.result=e,this.state.loading=!1}catch(t){console.error("loadable-components: failed to synchronously load component, which expected to be available",{fileName:o.resolve(this.props),chunkName:o.chunkName(this.props),error:t?t.message:t}),this.state.error=t}},i.loadAsync=function(){var e=this,t=this.resolveAsync();return t.then((function(t){var n=p(t,e.props,{Loadable:v});e.safeSetState({result:n,loading:!1},(function(){return e.triggerOnLoad()}))})).catch((function(t){return e.safeSetState({error:t,loading:!1})})),t},i.resolveAsync=function(){var e=this,t=this.props,n=(t.__chunkExtractor,t.forwardedRef,Object(h.a)(t,["__chunkExtractor","forwardedRef"])),a=this.getCache();return a||((a=o.requireAsync(n)).status="PENDING",this.setCache(a),a.then((function(){a.status="RESOLVED"}),(function(t){console.error("loadable-components: failed to asynchronously load component",{fileName:o.resolve(e.props),chunkName:o.chunkName(e.props),error:t?t.message:t}),a.status="REJECTED"}))),a},i.render=function(){var e=this.props,n=e.forwardedRef,r=e.fallback,o=(e.__chunkExtractor,Object(h.a)(e,["forwardedRef","fallback","__chunkExtractor"])),i=this.state,s=i.error,c=i.loading,d=i.result;if(t.suspense&&"PENDING"===(this.getCache()||this.loadAsync()).status)throw this.loadAsync();if(s)throw s;var u=r||t.fallback||null;return c?u:a({fallback:u,result:d,options:t,props:Object(l.a)({},o,{ref:n})})},n}(i.a.Component),O=(y=j,function(e){return i.a.createElement(g.Consumer,null,(function(t){return i.a.createElement(y,Object.assign({__chunkExtractor:t},e))}))}),v=i.a.forwardRef((function(e,t){return i.a.createElement(O,Object.assign({forwardedRef:t},e))}));return v.preload=function(e){o.requireAsync(e)},v.load=function(e){return o.requireAsync(e)},v}return{loadable:o,lazy:function(e,t){return o(e,Object(l.a)({},t,{suspense:!0}))}}}var O=j({defaultResolveComponent:function(e){return e.__esModule?e.default:e.default||e},render:function(e){var t=e.result,n=e.props;return i.a.createElement(t,n)}}),v=O.loadable,N=O.lazy,C=j({onLoad:function(e,t){e&&t.forwardedRef&&("function"===typeof t.forwardedRef?t.forwardedRef(e):t.forwardedRef.current=e)},render:function(e){var t=e.result,n=e.props;return n.children?n.children(t):null}}),x=C.loadable,k=C.lazy;var _=v;_.lib=x,N.lib=k;var S=_((function(){return Promise.all([n.e(13),n.e(57)]).then(n.bind(null,"OXIU"))}));function T(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?T(Object(n),!0).forEach((function(t){Object(a.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):T(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var B={title:"Starting out with d3.chart",date:"2013-12-18",__resourcePath:"blog/starting-out-with-d3-chart/index.mdx",__scans:{},layout:"index"},D={frontMatter:B},P=c.a;function z(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)(P,E(E(E({},D),n),{},{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Writing reusable D3 code can be tough. The community shines at providing one-off examples of really cool charts, but it's hard to find a conventional approach to building out a small library of reusable components. ",Object(s.b)("a",E({parentName:"p"},{href:"http://misoproject.com/d3-chart/"}),"d3.chart")," is a library from Bocoup that aims to simplify the development of reusable D3 charts."),Object(s.b)("p",null,"If you're not familiar with d3.chart at all, ",Object(s.b)("a",E({parentName:"p"},{href:"https://github.com/misoproject/d3.chart/wiki/quickstart"}),"this walkthrough")," on Github is a great place to start. You should be able to go through it without too much trouble, but as always, the devil is in the details. In this post I'll walk you through building a slightly more complex chart than what's in the walkthrough. Hopefully it will save you some time as you learn the library."),Object(s.b)("p",null,"Now, it wouldn't make much sense to create an isolated chart with d3.chart; after all, the whole point is composability. So let's start out by making a base chart, which we can then extend to make other visualizations."),Object(s.b)("h2",null,"The base chart"),Object(s.b)("p",null,"Most charts have a lot in common, like dealing with width and height or re-rendering on resize events. To share this functionality across all our charts, we'll make a base chart superclass. @iros, one of the library's authors, regularly updates a ",Object(s.b)("a",E({parentName:"p"},{href:"https://github.com/iros/d3.chart.base"}),"base chart")," on Github, which I use here as a starting point. (There's a lot going on in that code - don't worry about it for now.)"),Object(s.b)("p",null,"We start by defining our base chart:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'d3.chart("BaseChart", {\n  // config options go here\n});\n')),Object(s.b)("p",null,"Now let's create some properties. For this example, we'll add width, height, and margin properties to our base chart, since these are pretty common across all charts. In keeping with ",Object(s.b)("a",E({parentName:"p"},{href:"http://bl.ocks.org/mbostock/3019563"}),"D3's margin conventions"),", we want all code in our extended charts to be able to ignore margins. This means the ",Object(s.b)("inlineCode",{parentName:"p"},"width")," and ",Object(s.b)("inlineCode",{parentName:"p"},"height")," properties will refer to the ",Object(s.b)("em",{parentName:"p"},"inner")," dimensions of our base chart. Our extended charts can then use these values for scales and other similar objects, without any knowledge of what the base chart's margins are. Note that this is also how the box model and CSS work in the browser: the width of an element corresponds to the ",Object(s.b)("em",{parentName:"p"},"inner")," width."),Object(s.b)("p",null,"We'll create the properties in the ",Object(s.b)("inlineCode",{parentName:"p"},"initialize")," key of our chart's configuration:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'d3.chart("BaseChart", {\n  initialize: function () {\n    // set up properties with reasonable defaults\n    this._margin = { top: 20, right: 20, bottom: 20, left: 20 };\n    this._width = this.base.attr("width")\n      ? this.base.attr("width") - this._margin.left - this._margin.right\n      : 200;\n    this._height = this.base.attr("height")\n      ? this.base.attr("height") - this._margin.top - this._margin.bottom\n      : 200;\n  },\n});\n')),Object(s.b)("p",null,"As indicated in ",Object(s.b)("a",E({parentName:"p"},{href:"http://misoproject.com/d3-chart/api.html#d3chart_i_base"}),"the docs"),", ",Object(s.b)("inlineCode",{parentName:"p"},"this.base")," refers to the ",Object(s.b)("a",E({parentName:"p"},{href:"https://github.com/mbostock/d3/wiki/Selections"}),"D3 selection")," our chart will operate on - typically an ",Object(s.b)("inlineCode",{parentName:"p"},"<svg>")," element. If the width and height have already been set on this selection, we'll take those values for the dimensions of our charts; otherwise, we'll choose default values of 200."),Object(s.b)("p",null,"Next, we'll append a ",Object(s.b)("inlineCode",{parentName:"p"},"g")," element to the base and translate it by our margins - again, by convention:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),"d3.chart('BaseChart', {\n\n  initialize: function() {\n    ...\n\n    // add a marginalized container\n    this.base.append('g')\n      .attr('transform', 'translate(' + this._margin.left + ',' + this._margin.top + ')');\n  }\n\n});\n")),Object(s.b)("p",null,"We'll render our extended charts to this element. Since the charts will reference the inner dimensions, they will implicitly recognize our base chart's margins."),Object(s.b)("h2",null,"Getter/setters"),Object(s.b)("p",null,"To make the dimensions accessible, we can write getter/setters. Let's start with width:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),"d3.chart('BaseChart', {\n  initialize: function() {...},\n\n  width: function(newWidth) {\n    if (arguments.length === 0) {\n      return this._width;\n    }\n\n    // only if the width actually changed,\n    if (this._width !== newWidth) {\n\n      var oldWidth = this._width;\n\n      this._width = newWidth;\n\n      // set higher container's width\n      this.base.attr('width', this._width + this._margin.left + this._margin.right);\n\n      // trigger a change event\n      this.trigger('change:width', newWidth, oldWidth);\n    }\n\n    // always return the chart, for chaining magic.\n    return this;\n  }\n});\n")),Object(s.b)("p",null,"Notice that we trigger an event when the width changes, sending the new and old widths as event parameters. This allows our extended charts to, for example, render custom transitions during the change event."),Object(s.b)("p",null,"The height method is nearly identical, and for now I've just made the margin method a barebones getter/setter. You can see them both in the links at the end of this post."),Object(s.b)("p",null,"There's one more item on the agenda before we can leave our base chart. In the ",Object(s.b)("inlineCode",{parentName:"p"},"initialize")," method, we provided some defaults for width and height, in case they were not defined on the parent container element. If in fact we do use those defaults, our base chart should go ahead and set the container's actual dimensions in the DOM. The code is the same as what's already in our getter/setters: ",Object(s.b)("inlineCode",{parentName:"p"},"this.base.attr('width', this._width + this._margin.left + this._margin.right)"),"."),Object(s.b)("p",null,"Since duplication is evil, let's first wrap this up in a method instead of copying it, and then replace the code in the ",Object(s.b)("inlineCode",{parentName:"p"},"width")," method with a call to this new method:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),"d3.chart('BaseChart', {\n  initialize: function() {...},\n\n  updateContainerWidth: function() { this.base.attr('width', this._width + this._margin.left + this._margin.right); },\n\n  width: function(newWidth) {\n    ...\n    // set higher container's width\n    this.updateContainerWidth();\n    ...\n  },\n\n})\n")),Object(s.b)("p",null,"We do the same for height. Now, let's add code in the ",Object(s.b)("inlineCode",{parentName:"p"},"initialize")," method to make sure the parent container's dimensions are set:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),"d3.chart('BaseChart', {\n  initialize: function() {\n\n    // setup some reasonable defaults\n    this._margin = {top: 20, right: 20, bottom: 20, left: 20};\n    this._width  = this.base.attr('width') ? this.base.attr('width') - this._margin.left - this._margin.right : 200;\n    this._height = this.base.attr('height') ? this.base.attr('height') - this._margin.top - this._margin.bottom : 200;\n\n    // make sure container height and width are set\n    this.updateContainerWidth();\n    this.updateContainerHeight();\n\n    // add a marginalized container\n    this.base.append('g').attr('transform', 'translate(' + this._margin.left + ',' + this._margin.top + ')');\n\n  },\n\n  ...\n})\n")),Object(s.b)("p",null,"We now have a base chart that handles dimensions and margins - we're ready to extend it!"),Object(s.b)("h2",null,"A bar chart"),Object(s.b)("p",null,"We'll make a simple bar chart that extends our base chart:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'d3.chart("BaseChart").extend("BarChart", {\n  // config options\n});\n')),Object(s.b)("p",null,"Just like in the base chart, we'll put variables we plan on using throughout the chart in the ",Object(s.b)("inlineCode",{parentName:"p"},"initialize")," method, as properties. In this chart we'll need x and y scales, and a color scale."),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'d3.chart("BaseChart").extend("BarChart", {\n  initialize: function () {\n    this.xScale = d3.scale.ordinal().rangeRoundBands([0, this.width()], 0.1);\n    this.yScale = d3.scale.linear().range([this.height(), 0]);\n    this.color = d3.scale.category10();\n  },\n});\n')),Object(s.b)("p",null,"Notice that our extended bar chart has access to the width and height methods in the base chart (e.g. ",Object(s.b)("inlineCode",{parentName:"p"},"this.height()"),"), just as we'd expect."),Object(s.b)("p",null,"Next, let's think about the events that our base chart triggers. How will a changing width or height affect our bar chart? Looking at the code we just added, we can see that the x and y scales depend on the chart's dimensions. This means that when the width (height) changes, we need to update the range of the x (y) scale."),Object(s.b)("p",null,"There are some methods provided by d3.chart for data-driven operations, but since this code doesn't depend on the actual data our chart will be displaying, we can add it to the ",Object(s.b)("inlineCode",{parentName:"p"},"initialize")," method:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'d3.chart("BaseChart").extend("BarChart", {\n  initialize: function () {\n    var chart = this;\n\n    chart.xScale = d3.scale.ordinal().rangeRoundBands([0, chart.width()], 0.1);\n    chart.yScale = d3.scale.linear().range([chart.height(), 0]);\n    chart.color = d3.scale.category10();\n\n    // update scales on dimension changes\n    chart.on("change:width", function (newWidth) {\n      chart.xScale.rangeRoundBands([0, newWidth], 0.1);\n    });\n    chart.on("change:height", function (newHeight) {\n      chart.yScale.range([newHeight, 0]);\n    });\n  },\n});\n')),Object(s.b)("h2",null,"Transform"),Object(s.b)("p",null,"Layers in d3.chart are where we actually create our data-driven elements - in our case, the bars. But before we get there, we need to make sure our data is in the correct format. To find out if we need to first transform our data, lets ask ourselves the following:"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},"Does our data need to be massaged before being bound to our elements?"),Object(s.b)("li",{parentName:"ol"},"Are there any one-time data-driven operations that need to be performed on a given input data set for the chart as a whole (i.e. data-driven operations that don't belong in any particular layer)?")),Object(s.b)("p",null,"If you have operations that fall into either of these categories, you should put them in the ",Object(s.b)("inlineCode",{parentName:"p"},"transform")," method. This method takes the raw data that the user passes in, transforms it, and then hands the transformed data off to the rest of your chart."),Object(s.b)("p",null,"So what about us - do we need to perform any such operations? To answer the first question, let's look at a sample of our raw data:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'var data = [\n  {name: "A", value: 10},\n  {name: "B", value: 3},\n  ...\n]:\n')),Object(s.b)("p",null,"In our case, the ",Object(s.b)("inlineCode",{parentName:"p"},"value")," data will be bound to our bars. There's no transformation we need to perform, since we'll just pass the data through our scales to get the appropriate heights. So, we don't really need to massage the data for our layers."),Object(s.b)("p",null,"But what about the second question? Our scales ",Object(s.b)("em",{parentName:"p"},"do")," change based on the extent of our data. Because the scales are characteristics of the chart as a whole, rather than just the bars layer (consider sharing the scales with an axis layer), let's add code to update our scales in the ",Object(s.b)("inlineCode",{parentName:"p"},"transform")," method:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),"d3.chart('BaseChart').extend('BarChart', {\n\n  initialize: function() {..},\n\n  transform: function(data) {\n    var chart = this;\n\n    // update the scales\n    chart.xScale.domain(data.map(function(d) { return d.name; }));\n    chart.yScale.domain(d3.extent(data, function(d) {return d.value;}));\n\n    return data;\n  }\n\n});\n")),Object(s.b)("p",null,"Note that we have to return ",Object(s.b)("inlineCode",{parentName:"p"},"data"),", even though we didn't actually do anything to it, because d3.chart hands off the return value of this method to the rest of our chart."),Object(s.b)("h2",null,"Layers"),Object(s.b)("p",null,"Now we're ready to add a layer, where we will actually render the bars. We add the layer in the ",Object(s.b)("inlineCode",{parentName:"p"},"initialize")," method. Layers take a name, a D3 selection, and an options object in their definition (",Object(s.b)("a",E({parentName:"p"},{href:"http://misoproject.com/d3-chart/api.html#d3chart_i_layer"}),"docs"),"):"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),"d3.chart('BaseChart').extend('BarChart', {\n\n  initialize: function() {\n    ...\n\n    chart.layer('bars', chart.base.select('g').append('g').classed('bars',true), {\n      // layer options\n    });\n  },\n\n  transform: function(data) {...}\n\n});\n")),Object(s.b)("p",null,"Our bars layer gets its own ",Object(s.b)("inlineCode",{parentName:"p"},"g")," element. This element is a child of the base chart's ",Object(s.b)("inlineCode",{parentName:"p"},"g")," element, so that we can ignore margins while coding our bar chart."),Object(s.b)("p",null,"Now, let's flesh out the layer. Typically in D3, we use the following workflow:"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},"Bind data to elements"),Object(s.b)("li",{parentName:"ol"},"Insert those elements to the DOM"),Object(s.b)("li",{parentName:"ol"},"Transform those elements when the data changes")),Object(s.b)("p",null,"d3.chart preserves this workflow, but forces us to keep these concerns separate. We'll start out by binding our data within the ",Object(s.b)("inlineCode",{parentName:"p"},"dataBind")," method:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'chart.layer("bars", chart.base.select("g").append("g").classed("bars", true), {\n  dataBind: function (data) {\n    return this.selectAll(".bar").data(data);\n  },\n});\n')),Object(s.b)("p",null,"This gives us a data join to work with. Next, we use the ",Object(s.b)("inlineCode",{parentName:"p"},"insert")," method to insert the elements into the DOM:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),"chart.layer('bars', chart.base.select('g').append('g').classed('bars',true), {\n  dataBind: function(data) {...},\n\n  insert: function() {\n    return this.append('rect')\n      .attr('class', 'bar');\n  }\n\n});\n")),Object(s.b)("p",null,"In both of these methods we return the selections, so our subsequent handlers can use them."),Object(s.b)("p",null,"Finally, now that we have the elements in the DOM, we can manipulate them based on our data joins. D3 groups joins into enter, exit, update and merge subselections. d3.chart gives us access to each of these selections in an ",Object(s.b)("inlineCode",{parentName:"p"},"events")," hash within our layer. Within d3.chart, these events are referred to as ",Object(s.b)("em",{parentName:"p"},"lifecycle events"),"."),Object(s.b)("p",null,"Let's code the ",Object(s.b)("em",{parentName:"p"},"enter")," lifecycle event. When new data enters our document, we'll size the bars according to their values:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),"chart.layer('bars', chart.base.select('g').append('g').classed('bars',true), {\n  dataBind: function(data) {...},\n  insert: function() {...},\n\n  events: {\n    'enter': function() {\n      var chart = this.chart();\n\n      this.attr('x', function(d) { return chart.xScale(d.name); })\n        .attr('y', function(d) { return chart.yScale(d3.max([0, d.value])); })\n        .attr('fill', function(d) {return chart.color(d.name);})\n        .attr('width', chart.xScale.rangeBand())\n        .attr('height', function(d) { return Math.abs(chart.yScale(d.value) - chart.yScale(0)); });\n    }\n  }\n\n});\n")),Object(s.b)("p",null,"At this point you may be wondering why we ",Object(s.b)("inlineCode",{parentName:"p"},"append"),"ed the elements in the ",Object(s.b)("inlineCode",{parentName:"p"},"insert")," method, rather than in the ",Object(s.b)("inlineCode",{parentName:"p"},"enter")," selection, like ",Object(s.b)("a",E({parentName:"p"},{href:"http://d3js.org/#enter-exit"}),"we're used to seeing in standard D3 code"),":"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'d3.select("body")\n  .selectAll("p")\n  .data([4, 8, 15, 16, 23, 42])\n  .enter()\n  .append("p")\n  .text(function (d) {\n    return "I\u2019m number " + d + "!";\n  });\n')),Object(s.b)("p",null,"The reason we append elements in the ",Object(s.b)("inlineCode",{parentName:"p"},"insert")," method and not in the ",Object(s.b)("inlineCode",{parentName:"p"},"enter")," selection is for extensibility. d3.chart allows others to add code to our existing charts. One of they ways they can do this is by writing their own handlers to our chart's ",Object(s.b)("inlineCode",{parentName:"p"},"enter")," event. Because of this, we want to ensure that when they write their handler, they are referencing the same D3 selection; in essence, that ",Object(s.b)("inlineCode",{parentName:"p"},"this")," refers to the same thing in their code as it does in ours. In D3, when we ",Object(s.b)("inlineCode",{parentName:"p"},"append")," elements, we actually change the selection."),Object(s.b)("p",null,"Thus, by keeping our ",Object(s.b)("inlineCode",{parentName:"p"},"append")," operations in ",Object(s.b)("inlineCode",{parentName:"p"},"insert"),", and doing all other data-driven transformations on the ",Object(s.b)("inlineCode",{parentName:"p"},"enter")," selection within the events hash, ",Object(s.b)("inlineCode",{parentName:"p"},"this")," will always refer to the ",Object(s.b)("inlineCode",{parentName:"p"},"enter")," selection, for any developer who works on our chart."),Object(s.b)("p",null,"At this point, we have a working bar chart! Let's give it a spin."),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'var data = [\n  { name: "A", value: 4 },\n  { name: "B", value: -36 },\n  { name: "C", value: 19 },\n  { name: "D", value: -2 },\n  { name: "E", value: 6 },\n];\n\nvar barChart = d3.select("#bar-chart").append("svg").chart("BarChart");\n\nbarChart.draw(data);\n')),Object(s.b)("div",{id:"bar-chart"}),Object(s.b)("p",null,"Cool! Inspect the chart to see how the margins and layers work."),Object(s.b)("p",null,"Let's try out our width accessor:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'var barChart = d3\n  .select("#wide-bar-chart")\n  .append("svg")\n  .chart("BarChart")\n  .width(500);\n')),Object(s.b)("div",{id:"wide-bar-chart"}),Object(s.b)("h2",null,"Transitions"),Object(s.b)("p",null,"Working with transitions is quite easy, because transitions are lifecycle events just like the ",Object(s.b)("inlineCode",{parentName:"p"},"enter")," event. You can access a transition event by adding ",Object(s.b)("inlineCode",{parentName:"p"},":transition")," to any of the four standard lifecycle events."),Object(s.b)("p",null,"Let's make our bars grow when they enter. First, we'll change the ",Object(s.b)("inlineCode",{parentName:"p"},"enter")," lifecycle event, because when they are first drawn, the bars should start out on the x-axis with a height of 0:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-diff"}),"  'enter': function() {\n    var chart = this.chart();\n\n    this.attr('x', function(d) { return chart.xScale(d.name); })\n-     .attr('y', function(d) { return chart.yScale(d3.max([0, d.value])); })\n+     .attr('y', function(d) { return chart.yScale(0); })\n      .attr('fill', function(d) {return chart.color(d.name);})\n      .attr('width', chart.xScale.rangeBand())\n-     .attr('height', function(d) { return Math.abs(chart.yScale(d.value) - chart.yScale(0)); });\n+     .attr('height', 0);\n  },\n")),Object(s.b)("p",null,"Now, we'll make them grow in the ",Object(s.b)("inlineCode",{parentName:"p"},"enter:transition")," event. We need to animate both the ",Object(s.b)("inlineCode",{parentName:"p"},"y")," value and the bar's ",Object(s.b)("inlineCode",{parentName:"p"},"height"),":"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),"  'enter:transition': function() {\n    var chart = this.chart();\n\n    this.duration(chart.duration)\n      .attr('y', function(d) { return chart.yScale(d3.max([0, d.value])); })\n      .attr('height', function(d) { return Math.abs(chart.yScale(d.value) - chart.yScale(0)); });\n  }\n")),Object(s.b)("p",null,"All set! Let's try it out."),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'var barChart = d3\n  .select("#animated-bar-chart")\n  .append("svg")\n  .chart("BarChart")\n  .width(500);\n')),Object(s.b)("p",null,Object(s.b)("a",{id:"draw-animated-bar-chart"},"Click to run")),Object(s.b)("div",{id:"animated-bar-chart"}),Object(s.b)("h2",null,"Conclusion"),Object(s.b)("p",null,"We've seen that d3.chart helps us build robust, reusable code. We were able to abstract common traits like widths and margins into our base chart, and extend it into a bar chart that's wide open for customization."),Object(s.b)("p",null,"d3.chart also helps us separate our D3 code into logical chunks - but what's really cool is how this aspect carries over as we (or even other developers) extend our charts. For example, say we wanted to use the bar chart from this post, but we needed bars with negative values to be colored red. When using charting libraries, you'll often run into situations like this: you're able to work the configuration options 95% of the way, but you always seem to fall one option short of getting the exact chart you need."),Object(s.b)("p",null,"Fortunately, with d3.chart, this isn't an issue - just add the code yourself:"),Object(s.b)("pre",null,Object(s.b)("code",E({parentName:"pre"},{className:"language-js"}),'d3.chart("AnimatedBarChart").extend("ProfitLossBarChart", {\n  initialize: function () {\n    this.layer("bars").on("enter", function () {\n      this.style("fill", function (d, i) {\n        return d.value < 0 ? "red" : "blue";\n      });\n    });\n  },\n});\n')),Object(s.b)("div",{id:"profit-loss-bar-chart"}),Object(s.b)("p",null,"Suffice it to say, d3.chart provides a very good solution to the perennial problem of chart configuration. I encourage you to try it out, and remember to ",Object(s.b)("a",E({parentName:"p"},{href:"http://misoproject.com/d3-chart/charts.html"}),"show off your work on d3.chart's website"),"!"),Object(s.b)(S,{mdxType:"Demo"}))}z.isMDXComponent=!0},TOwV:function(e,t,n){"use strict";e.exports=n("qT12")},dI71:function(e,t,n){"use strict";function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return a}))},gEhv:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/starting-out-with-d3-chart",function(){return n("AImo")}])},qT12:function(e,t,n){"use strict";var a="function"===typeof Symbol&&Symbol.for,r=a?Symbol.for("react.element"):60103,o=a?Symbol.for("react.portal"):60106,i=a?Symbol.for("react.fragment"):60107,s=a?Symbol.for("react.strict_mode"):60108,c=a?Symbol.for("react.profiler"):60114,h=a?Symbol.for("react.provider"):60109,l=a?Symbol.for("react.context"):60110,d=a?Symbol.for("react.async_mode"):60111,u=a?Symbol.for("react.concurrent_mode"):60111,b=a?Symbol.for("react.forward_ref"):60112,p=a?Symbol.for("react.suspense"):60113,m=a?Symbol.for("react.suspense_list"):60120,f=a?Symbol.for("react.memo"):60115,g=a?Symbol.for("react.lazy"):60116,w=a?Symbol.for("react.block"):60121,y=a?Symbol.for("react.fundamental"):60117,j=a?Symbol.for("react.responder"):60118,O=a?Symbol.for("react.scope"):60119;function v(e){if("object"===typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case d:case u:case i:case c:case s:case p:return e;default:switch(e=e&&e.$$typeof){case l:case b:case g:case f:case h:return e;default:return t}}case o:return t}}}function N(e){return v(e)===u}t.AsyncMode=d,t.ConcurrentMode=u,t.ContextConsumer=l,t.ContextProvider=h,t.Element=r,t.ForwardRef=b,t.Fragment=i,t.Lazy=g,t.Memo=f,t.Portal=o,t.Profiler=c,t.StrictMode=s,t.Suspense=p,t.isAsyncMode=function(e){return N(e)||v(e)===d},t.isConcurrentMode=N,t.isContextConsumer=function(e){return v(e)===l},t.isContextProvider=function(e){return v(e)===h},t.isElement=function(e){return"object"===typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return v(e)===b},t.isFragment=function(e){return v(e)===i},t.isLazy=function(e){return v(e)===g},t.isMemo=function(e){return v(e)===f},t.isPortal=function(e){return v(e)===o},t.isProfiler=function(e){return v(e)===c},t.isStrictMode=function(e){return v(e)===s},t.isSuspense=function(e){return v(e)===p},t.isValidElementType=function(e){return"string"===typeof e||"function"===typeof e||e===i||e===u||e===c||e===s||e===p||e===m||"object"===typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===f||e.$$typeof===h||e.$$typeof===l||e.$$typeof===b||e.$$typeof===y||e.$$typeof===j||e.$$typeof===O||e.$$typeof===w)},t.typeOf=v},wx14:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return a}))}},[["gEhv",0,2,1,3,4,5,6]]]);